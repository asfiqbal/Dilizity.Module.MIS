<?xml version="1.0" encoding="utf-8" ?>
<root>
  <Schema Name="Report" DataSource="Server=.;Database=ReportMIS;User Id=sa;Password=Avanza123;Connection Timeout=10;" Provider="System.Data.SqlClient">
      <Query ID="GetAllReports" DataSource="">
        <![CDATA[
          SELECT REPORT_ID ReportId, REPORT_NAME, REPORT_DISPLAY_NAME, REPORT_SQL
          FROM   REPORT
        ]]>
      </Query>
    <Query ID="GetReportColumns" DataSource="">
      <![CDATA[
          select  COLUMN_NAME ColumnName, 
		          DISPLAY_NAME DisplayName, 
		          COLUMN_PERMISSION_NAME ColumnPermissionName, 
		          MASKING_FILTER_ID MaskingFilter
          from	RPT_REPORT_COLUMNS
          where	REPORT_ID = 1
          AND		IS_DELETED = 0
        ]]>
      <Param Name="ReportId" Type="System.Int32"  Size="0"/>
    </Query>
      <Query ID="GetSpecificReport" DataSource="">
        <![CDATA[
          SELECT REPORT_ID ReportId, REPORT_NAME, REPORT_DISPLAY_NAME, REPORT_SQL
          FROM   REPORT
          WHERE  REPORT_ID = @ReportId
        ]]>
        <Param Name="ReportId" Type="System.Int32"  Size="0"/>
      </Query>
      <Query ID="InsertReport">
        <![CDATA[
          INSERT INTO REPORT (REPORT_NAME, REPORT_DISPLAY_NAME, REPORT_SQL) VALUES (@ReportName, @ReportDisplayName, @ReportSQL);
          SELECT SCOPE_IDENTITY(); 
        ]]>
        <Param Name="ReportName" Type="System.String"  Size="50"/>
        <Param Name="ReportDisplayName" Type="System.String"  Size="20"/>
        <Param Name="ReportSQL" Type="System.String"  Size="0"/>
      </Query>
      <Query ID="UpdateReport">
        <![CDATA[
          UPDATE REPORT
          SET REPORT_NAME = 'Transaction';
          SELECT @@ROWCOUNT;
        ]]>
      </Query>
      <Query ID="DeleteReport">
        <![CDATA[
          DELETE FROM REPORT
          WHERE REPORT_ID = @ReportId;
          SELECT @@ROWCOUNT;
        ]]>
        <Param Name="ReportId" Type="System.Int32"  Size="0"/>
      </Query>
      <Query ID="CountReport">
        <![CDATA[
            SELECT COUNT(*) TotalCount
            FROM   REPORT
          ]]>
      </Query>
      <Query ID="GetMenus" DataSource="">
        <![CDATA[
          SELECT  REPORT_MENU_ID Id, 
                  PARENT_ID ParentId,
                  RM.DISPLAY_NAME MenuName,
                  P.SYSTEM_NAME PermissionName,
                  'index.OpenReport({ reportId: '+cast(R.REPORT_ID as nvarchar(10))+', permissionId: '''+P.SYSTEM_NAME+''' })' Url
          FROM	SEC_VW_DISTINCT_USER_PERMISSION P
                  INNER JOIN RPT_REPORT_MENU RM ON P.PERMISSION_ID = RM.PERMISSION_ID
                  LEFT OUTER JOIN RPT_REPORT R ON P.PERMISSION_ID = R.REPORT_PERMISSION_ID
          WHERE   P.LOGIN_ID = @LoginId
        ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
      </Query>
      <Query ID="GetSideMenus" DataSource="">
        <![CDATA[
            select  SM.MENU_ID Id, PARENT_ID ParentId, DISPLAY_NAME MenuName, STYLE_CLASS StyleClass, SM.URL Url
            from	  SEC_VW_DISTINCT_USER_PERMISSION P
		                INNER JOIN SEC_SIDEBAR_MENU SM ON P.PERMISSION_ID = SM.PERMISSION_ID
            where	  LOGIN_ID = @LoginId
            AND		  IS_DELETED = 0
          ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
      </Query>
    <Query ID="GetTemplateCodes" DataSource="">
        <![CDATA[
            SELECT TEMPLATE_CODE_ID TemplateCodeId,
            NAME Name,
            DESCRIPTION Description,
            MULTIPLE_RESULT MultipleResult,
            CONTEXT_AWARE ContextAware,
            DATA_FUNCTION DataFunction,
            IS_DELETED IsDeleted,
            IS_SYSTEM IsSystem,
            CREATED_ON CreatedOn,
            CREATED_BY CreatedBy,
            UPDATED_ON UpdatedOn,
            UPDATED_BY UpdatedBy
            FROM MSG_TEMPLATE_CODES
          ]]>
      </Query>
      <Query ID="IsValidMessageTag" DataSource="">
        <![CDATA[
            SELECT 1 ValidTag
            FROM MSG_TEMPLATE_CODES
            WHERE IS_DELETED = 0
            AND NAME = @Tag
          ]]>
        <Param Name="Tag" Type="System.String"  Size="400"/>
      </Query>
      <Query ID="GetSMTPSettings" DataSource="">
        <![CDATA[
          select SMTP_SERVER SMTPServer,SMTP_SERVER_FROM_ADDRESS SMTPServerFromAddress,SMTP_SERVER_USER_ID SMTPServerUserId,SMTP_SERVER_Password SMTPServerPassword,SMTP_SERVER_Port SMTPServerPort, SMTP_SERVER_ENABLE_SSL SMTPServerEnableSSL
          from 
          (
            select Name,value
            from SYSTEM_CONFIGURATION
          ) src
          pivot
          (
            max(value)
            for Name in (SMTP_SERVER,SMTP_SERVER_FROM_ADDRESS,SMTP_SERVER_USER_ID,SMTP_SERVER_Password,SMTP_SERVER_Port, SMTP_SERVER_ENABLE_SSL)
          ) piv;
            ]]>
      </Query>
      <Query ID="GetSMSSettings" DataSource="">
        <![CDATA[
          select SMS_SERVER_URL SMSServerURL
          from 
          (
            select Name,value
            from SYSTEM_CONFIGURATION
          ) src
          pivot
          (
            max(value)
            for Name in (SMS_SERVER_URL)
          ) piv;
            ]]>
      </Query>
      <Query ID="GetTemplate" DataSource="">
        <![CDATA[
          SELECT  MT.NAME Name, MT.TEMPLATE Template, MT.SUBJECT Subject
          FROM	[DBO].[MSG_ASSIGNED_TEMPLATES] MAT
		            INNER JOIN [MSG_TEMPLATES] MT ON MAT.TEMPLATE_ID = MT.TEMPLATE_ID AND MT.IS_DELETED = 0
		            INNER JOIN SEC_VW_DISTINCT_USER_PERMISSION DUP ON MAT.PERMISSION_ID = DUP.PERMISSION_ID
          WHERE MT.TEMPLATE_TYPE = @TemplateType
          AND		DUP.LOGIN_ID = @LoginId
          AND		DUP.SYSTEM_NAME = @PermissionName
        ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="PermissionName" Type="System.String"  Size="200"/>
        <Param Name="TemplateType" Type="System.Int32"  Size="0"/>
      </Query>
      <Query ID="GetWorkFlowActions" DataSource="">
        <![CDATA[
            WITH WF ( Permission_id, PARENT_PERMISSION_ID )
            AS
            (
            SELECT	Permission_id, PARENT_PERMISSION_ID  
            from	SEC_PERMISSION P
            WHERE   P.SYSTEM_NAME = @Permission
            UNION ALL
            SELECT	P.PARENT_PERMISSION_ID, WF.Permission_id
            from	SEC_PERMISSION P
		            INNER JOIN WF ON P.Permission_id  = WF.PARENT_PERMISSION_ID
            WHERE   WF.Permission_id not in (SELECT PERMISSION_ID FROM WORK_FLOW_ACTION)
            )
            SELECT WF.Permission_id PermissionId, 
		            FA.SYSTEM_TYPE SystemType,
		            SYSTEM_ASSEMBLY SystemAssembly,
		            ACTION_ORDER ActionOrder,
		            VERSION Version,
		            EXECUTION_BEHAVIOR ExecutionBehavior,
                IS_ERROR_TOLERANT IsErrorTolerant
            FROM WF
	             INNER JOIN SEC_PERMISSION SP ON WF.Permission_id = SP.PERMISSION_ID
	             INNER JOIN WORK_FLOW_ACTION FA ON WF.Permission_id = FA.PERMISSION_ID
            WHERE FA.EXECUTION_BEHAVIOR = @ExecutionBehavior
            order by ActionOrder 
        ]]>
        <Param Name="Permission" Type="System.String"  Size="200"/>
        <Param Name="ExecutionBehavior" Type="System.Int32"  Size="0"/>
      </Query>
      <Query ID="GetReportMetaScreenInfo" DataSource="">
        <![CDATA[
          select  'row row-no-padding' ClassName, R.REPORT_ID ReportId, UP.SYSTEM_NAME PermissionName, R.SYSTEM_NAME SystemName, R.DISPLAY_NAME DisplayName
          from	  RPT_REPORT R
		              INNER JOIN SEC_VW_DISTINCT_USER_PERMISSION UP ON R.REPORT_PERMISSION_ID = UP.PERMISSION_ID
          WHERE   R.REPORT_ID = @ReportId
          AND		  R.IS_DELETED = 0
          AND		  UP.LOGIN_ID = @LoginId
        ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="ReportId" Type="System.Int32"  Size="0"/>
      </Query>
      <Query ID="GetReportQueryAndConnectionString" DataSource="">
        <![CDATA[
          select  S.CONNECTION_STRING ConnectionString, R.QUERY Query, S.PROVIDER_NAME ProviderName
          from	RPT_REPORT R
		          INNER JOIN RPT_REPORT_DATA_SOURCE S ON R.REPORT_DATA_SOURCE_ID = S.REPORT_DATA_SOURCE_ID
          where   R.REPORT_ID = @ReportId
          AND		R.IS_DELETED = 0
          AND		S.IS_DELETED = 0
        ]]>
        <Param Name="ReportId" Type="System.Int32"  Size="0"/>
      </Query>
      <Query ID="GetReportFilters" DataSource="">
        <![CDATA[
          select	Filter_name FilterName, TD.TYPE_DATA DataType, case when TD.TYPE_DATA = 'System.String' THEN 200 ELSE 0 END Size
          from	RPT_REPORT_FILTERS R
		          INNER JOIN SYSTEM_TYPE_DATA TD ON R.FILTER_DATA_TYPE_ID = TD.TYPE_DATA_ID
          where   R.REPORT_ID = @ReportId
          AND		R.IS_DELETED = 0
        ]]>
        <Param Name="ReportId" Type="System.Int32"  Size="0"/>
      </Query>    
      <Query ID="GetReportMetaFiltersInfo" DataSource="">
        <![CDATA[
        SELECT  'col-md-3 col-sm-6 col-xs-12' ClassName,
                FILTER_NAME FilterName,
		            DISPLAY_NAME DispayName,
		            PLACE_HOLDER PlaceHolder,
		            TD1.TYPE_DATA FilterType,
		            TD3.TYPE_DATA TemplateOptionType,
				        case when TD1.TYPE_DATA = 'datepicker' then 'dd-MMMM-yyyy' ELSE NULL END DatepickerPopup,
		            IS_MANDATORY IsMandatory,
				        NULL as DefaultValue,
		            ISNULL(FILTER_DATA_SOURCE_QUERY, '') FilterDataSourceQuery,
		            ISNULL(DS.CONNECTION_STRING,'') FilterConnectionString,
		            'System.Data.SqlClient' ProviderName
        FROM	  RPT_REPORT_FILTERS RF
		            INNER JOIN SYSTEM_TYPE_DATA TD1 ON RF.FILTER_TYPE_ID = TD1.TYPE_DATA_ID
		            LEFT OUTER JOIN SYSTEM_TYPE_DATA TD3 ON RF.TEMPLATE_OPTION_TYPE = TD3.TYPE_DATA_ID
		            LEFT OUTER JOIN RPT_REPORT_DATA_SOURCE DS ON RF.REPORT_DATA_SOURCE_ID = DS.REPORT_DATA_SOURCE_ID   
        WHERE   REPORT_ID = @ReportId
        UNION ALL
        SELECT  'col-md-3 col-sm-6 col-xs-12' ClassName,
                FIELD_NAME FilterName,
		            DISPLAY_NAME DispayName,
		            PLACE_HOLDER PlaceHolder,
		            TD1.TYPE_DATA FilterType,
		            TD3.TYPE_DATA TemplateOptionType,
		            NULL DatepickerPopup,
		            NULL IsMandatory,
		            cast(@ReportId as nvarchar(10)) DefaultValue,
		            NULL FilterDataSourceQuery,
		            NULL FilterConnectionString,
		            'System.Data.SqlClient' ProviderName
        FROM	  RPT_REPORT_SYSTEM_FIELDS SF
		            INNER JOIN SYSTEM_TYPE_DATA TD1 ON SF.FILTER_TYPE_ID = TD1.TYPE_DATA_ID
		            LEFT OUTER JOIN SYSTEM_TYPE_DATA TD3 ON SF.TEMPLATE_OPTION_TYPE = TD3.TYPE_DATA_ID
      ]]>
        <Param Name="ReportId" Type="System.Int32"  Size="0"/>
      </Query>
  </Schema>
  <Schema Name="Security" DataSource="Server=.;Database=ReportMIS;User Id=sa;Password=Avanza123;Connection Timeout=10;" Provider="System.Data.SqlClient">
      <Query ID="GetSystemConfiguration" DataSource="">
        <![CDATA[
          select  NAME Name,
		              VALUE Value
          from	  [SYSTEM_CONFIGURATION]
        ]]>
      </Query>
      <Query ID="GetAllUsers" DataSource="">
        <![CDATA[
          SELECT USER_ID UserId, LOGIN_ID LoginId, PASSWORD Password, PASSWORD_POLICY_ID PasswordPolicyId, PASSWORD_ATTEMPTS PasswordAttempts, ACCOUNT_LOCKED AccountLocked, IS_SYSTEM IsSystem, IS_DELETED IsDeleted, CREATED_ON CreatedOn, CREATED_BY CreatedBy, UPDATED_ON UpdatedOn, UPDATED_BY UpdatedBy
          FROM	 [SEC_USER]
        ]]>
      </Query>
      <Query ID="GetUser" DataSource="">
        <![CDATA[
            SELECT  USER_ID UserId, NAME Name, LOGIN_ID LoginId, PASSWORD Password, PASSWORD_POLICY_ID PasswordPolicyId, PASSWORD_ATTEMPTS PasswordAttempts, ACCOUNT_LOCKED AccountLocked, [CHANGE_PASSWORD_ON_LOGON] ChangePasswordOnLogon, EMAIL Email, MOBILE_NUMBER MobileNumber, LAST_PASSWORD_CHANGE_DATETIME LastPasswordChangeDateTime, [LAST_LOGIN_DATETIME] LastLoginDateTime, CREATED_ON CreatedOn, CREATED_BY CreatedBy, UPDATED_ON UpdatedOn, UPDATED_BY UpdatedBy
            FROM    SEC_USER SU
            WHERE   SU.IS_DELETED = 0
            AND     SU.LOGIN_ID = @LoginId
          ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
      </Query>
      <Query ID="UpdateUserPasswordAttempt" DataSource="">
        <![CDATA[
              UPDATE  SEC_USER
              SET     PASSWORD_ATTEMPTS = @PasswordAttempt,
                      ACCOUNT_LOCKED = @AccountLocked,
                      LAST_LOGIN_DATETIME = GetDate()
              WHERE   IS_DELETED = 0
              AND     LOGIN_ID = @LoginId;
              SELECT @@ROWCOUNT;
            ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="PasswordAttempt" Type="System.Int32"  Size="0"/>
        <Param Name="AccountLocked" Type="System.Int32"  Size="0"/>
      </Query>    
      <Query ID="ChangeUserPassword" DataSource="">
        <![CDATA[
              UPDATE  SEC_USER
              SET     PASSWORD = @Password,
                      PASSWORD_ATTEMPTS = (select  DEFAULT_PASSWORD_ATTEMPTS from	SEC_PASSWORD_POLICY WHERE PASSWORD_POLICY_ID = SEC_USER.PASSWORD_POLICY_ID),
                      ACCOUNT_LOCKED = 0,
		                  UPDATED_ON = GETDATE(),
                      LAST_PASSWORD_CHANGE_DATETIME = GETDATE(),
		                  CHANGE_PASSWORD_ON_LOGON = 0
              WHERE   IS_DELETED = 0
              AND     LOGIN_ID = @LoginId;
              SELECT @@ROWCOUNT;
            ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="Password" Type="System.String"  Size="200"/>
      </Query>        
      <Query ID="InsertChangePasswordHistory" DataSource="">
        <![CDATA[
              INSERT INTO [SEC_CHANGE_PASSWORD_HISTORY](USER_ID,PASSWORD,CREATED_ON,CREATED_BY)
              VALUES((SELECT USER_ID FROM SEC_USER WHERE LOGIN_ID = @LoginId),@Password, GetDate(), @LoginId);
              SELECT SCOPE_IDENTITY(); 
            ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="Password" Type="System.String"  Size="200"/>
      </Query>
      <Query ID="CheckLastNPasswords" DataSource="">
        <![CDATA[
                SELECT 1 Matched
                FROM
                (
                select TOP (@NumberCantReuse) CPH.PASSWORD
                FROM	[SEC_CHANGE_PASSWORD_HISTORY] CPH
		                INNER JOIN SEC_USER SU ON CPH.USER_ID = SU.USER_ID
                WHERE   SU.LOGIN_ID = @LoginId
                ORDER BY CPH.CREATED_ON DESC
                ) T
                WHERE T.PASSWORD IN (@Password) 
            ]]>
        <Param Name="NumberCantReuse" Type="System.Int32"  Size="0"/>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="Password" Type="System.String"  Size="8000"/>
      </Query>
      <Query ID="GetUserPasswordPolicy" DataSource="">
        <![CDATA[
              SELECT  SP.PASSWORD_POLICY_ID PasswordPolicyId, SP.POLICY_NAME PolicyName, SP.LENGTH_RULE LengthRule, SP.EXPIRY_RULE ExpiryRule, SP.NUMBER_CANT_REUSE NumberCantReuse, SP.COMPLEXITY_RULE ComplexityRule, SP.FIRST_LOGIN_CHANGE_PASSWORD FirstLoginChangePassword, SP.IS_SYSTEM IsSystem, SP.IS_DELETED IsDeleted, SP.IS_EMAIL_SENT_ON_LOGON IsEmailSentOnLogon, SP.IS_SMS_SENT_ON_LOGON IsSMSSentOnLogon, SP.IS_2FA_ENABLED Is2FAEnabled, SP.DEFAULT_PASSWORD_ATTEMPTS DefaultPasswordAttempts, SP.ACCOUNT_LOCK_ON_FAILED_ATTEMPTS AccountLockOnFailedAttempts, SP.IS_CAPTCHA_ENABLED IsCaptchaEnabled, SP.CREATED_ON CreatedOn, SP.CREATED_BY CreatedBy, SP.UPDATED_ON UpdatedOn, SP.UPDATED_BY UpdatedBy
              FROM	  SEC_USER SU 
		                  INNER JOIN SEC_PASSWORD_POLICY SP ON SU.PASSWORD_POLICY_ID = SP.PASSWORD_POLICY_ID AND SP.IS_DELETED = 0
              WHERE   SU.LOGIN_ID = @LoginId
              AND     SU.IS_DELETED = 0
            ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
      </Query>    
      <Query ID="CheckPermission" DataSource="">
        <![CDATA[
              select  1 Success
              FROM	  SEC_USER SU
		                  INNER JOIN SEC_USER_ROLE SUR ON SU.USER_ID = SUR.USER_ID
		                  INNER JOIN SEC_ROLE_PERMISSION SRP ON SUR.ROLE_ID = SRP.ROLE_ID
		                  INNER JOIN SEC_PERMISSION SP ON SRP.PERMISSION_ID = SP.PERMISSION_ID
              WHERE   SP.SYSTEM_NAME = @Permission
              AND     SU.LOGIN_ID = @LoginId
              ANd		  SU.ACCOUNT_LOCKED = 0
              AND		  SU.IS_DELETED = 0
            ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="Permission" Type="System.String"  Size="8000"/>
      </Query>
      <Query ID="InsertAudit">
        <![CDATA[
            INSERT INTO SEC_AUDIT (USER_ID, PERMISSION_ID, IS_SUCCESS, DATA, CREATED_BY) VALUES ((SELECT USER_ID FROM SEC_USER WHERE LOGIN_ID = @LoginId), (SELECT PERMISSION_ID FROM SEC_PERMISSION WHERE SYSTEM_NAME = @PermissionName), @IsSuccess, @Data, @CreatedBy);
            SELECT SCOPE_IDENTITY(); 
          ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="PermissionName" Type="System.String"  Size="200"/>
        <Param Name="IsSuccess" Type="System.String"  Size="200"/>
        <Param Name="Data" Type="System.String"  Size="-1"/>
        <Param Name="CreatedBy" Type="System.String"  Size="200"/>
      </Query>
        <Query ID="CommonScreenUserPermission" DataSource="">
        <![CDATA[
            WITH WF ( Permission_id, PARENT_PERMISSION_ID)
            AS
            (
            SELECT	Permission_id, PARENT_PERMISSION_ID
            from	SEC_PERMISSION P
            WHERE   P.SYSTEM_NAME = @PermissionId
            UNION ALL
            SELECT	P.Permission_id, P.PARENT_PERMISSION_ID
            from	SEC_PERMISSION P
		            INNER JOIN WF ON P.PARENT_PERMISSION_ID  = WF.Permission_id
            WHERE	UPPER(P.SYSTEM_NAME) NOT LIKE '%.EMAIL%'
            AND		UPPER(P.SYSTEM_NAME) NOT LIKE '%.CHECKER%'
            )
            select	[dbo].[FN_GET_FRIENDLY_PERMISSION_NAME](V.SYSTEM_NAME) FieldKey, V.SYSTEM_NAME PermissionName
            from	WF
		            INNER JOIN SEC_VW_DISTINCT_USER_PERMISSION V ON WF.PERMISSION_ID = V.PERMISSION_ID
            WHERE   V.LOGIN_ID = @LoginId
            AND		[dbo].[FN_GET_FRIENDLY_PERMISSION_NAME](V.SYSTEM_NAME) in ('Search','Add','Edit','Delete','View','Maker')
            ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="PermissionId" Type="System.String"  Size="200"/>
      </Query>    
      <Query ID="UserSpecficPermissions" DataSource="">
        <![CDATA[
            SELECT  -1 PermissionId, 'All' PermissionName
            UNION ALL        
            SELECT	PERMISSION_ID PermissionId, PERMISSION_NAME PermissionName
            FROM	  SEC_VW_DISTINCT_USER_PERMISSION 
            WHERE   LOGIN_ID = @LoginId
            ORDER BY 2
            ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
      </Query>
      <Query ID="SearchRole" DataSource="">
        <![CDATA[
              WITH SQLPaging
              AS
              (
              SELECT TOP(@PageSize * @PageNumber) ResultNum = ROW_NUMBER() OVER (ORDER BY 
					              CASE WHEN @SortOrder = 'Role Id' AND @SortDirection = 'asc' THEN ROLE_ID END ASC,
					              CASE WHEN @SortOrder = 'Role Id' AND @SortDirection = 'desc' THEN ROLE_ID END DESC,
					              CASE WHEN @SortOrder = 'Role Name' AND @SortDirection = 'asc' THEN ROLE_NAME END ASC,
					              CASE WHEN @SortOrder = 'Role Name' AND @SortDirection = 'desc' THEN ROLE_NAME END DESC,
					              CASE WHEN @SortOrder = 'Is System' AND @SortDirection = 'asc' THEN IS_SYSTEM END ASC,
					              CASE WHEN @SortOrder = 'Is System' AND @SortDirection = 'desc' THEN IS_SYSTEM END DESC,
					              CASE WHEN @SortOrder = 'Updated By' AND @SortDirection = 'asc' THEN UPDATED_BY END ASC,
					              CASE WHEN @SortOrder = 'Updated By' AND @SortDirection = 'desc' THEN UPDATED_BY END DESC,
					              CASE WHEN @SortOrder = 'Updated On' AND @SortDirection = 'asc' THEN UPDATED_ON END ASC,
					              CASE WHEN @SortOrder = 'Updated On' AND @SortDirection = 'desc' THEN UPDATED_ON END DESC
			              )
				              , *
              FROM SEC_ROLE
              WHERE   IS_DELETED = 0
              AND	(ROLE_ID = @RoleId OR @RoleId = 0)
              AND	(ROLE_NAME LIKE '%'+@RoleName+'%' OR @RoleName =  '')
              AND	(ROLE_ID IN (SELECT ROLE_ID FROM SEC_ROLE_PERMISSION WHERE PERMISSION_ID in (@RolePermissionId)) OR @RolePermissionId = -1)
              )
              SELECT ROLE_ID RoleId, ROLE_NAME RoleName, IS_SYSTEM IsSystem, UPDATED_ON UpdatedOn, UPDATED_BY UpdatedBy
              FROM SQLPaging
              WHERE ResultNum > ((@PageNumber - 1) * @PageSize)
              order by ResultNum
        ]]>
      <Param Name="RoleId" Type="System.Int32"  Size="0"/>
      <Param Name="RoleName" Type="System.String"  Size="200"/>
      <Param Name="RolePermissionId" Type="System.Int32"  Size="0"/>
      <Param Name="PageSize" Type="System.Int32"  Size="0"/>
      <Param Name="PageNumber" Type="System.Int32"  Size="0"/>
      <Param Name="SortOrder" Type="System.String"  Size="200"/>
      <Param Name="SortDirection" Type="System.String"  Size="200"/>
    </Query>
    <Query ID="SearchMaker" DataSource="">
        <![CDATA[
            WITH SQLPaging
                AS
                (
                SELECT TOP(@PageSize * @PageNumber) ResultNum = ROW_NUMBER() OVER (ORDER BY 
					                CASE WHEN @SortOrder = 'Maker Id' AND @SortDirection = 'asc' THEN MAKER_ID END ASC,
					                CASE WHEN @SortOrder = 'Maker Id' AND @SortDirection = 'desc' THEN MAKER_ID END DESC,
					                CASE WHEN @SortOrder = 'Permission Name' AND @SortDirection = 'asc' THEN PP.PERMISSION_NAME END ASC,
					                CASE WHEN @SortOrder = 'Permission Name' AND @SortDirection = 'desc' THEN PP.PERMISSION_NAME END DESC,
					                CASE WHEN @SortOrder = 'Status' AND @SortDirection = 'asc' THEN Status END ASC,
					                CASE WHEN @SortOrder = 'Status' AND @SortDirection = 'desc' THEN Status END DESC,
					                CASE WHEN @SortOrder = 'Created By' AND @SortDirection = 'asc' THEN M.CREATED_BY END ASC,
					                CASE WHEN @SortOrder = 'Created By' AND @SortDirection = 'desc' THEN M.CREATED_BY END DESC,
					                CASE WHEN @SortOrder = 'Created On' AND @SortDirection = 'asc' THEN M.CREATED_ON END ASC,
					                CASE WHEN @SortOrder = 'Created On' AND @SortDirection = 'desc' THEN M.CREATED_ON END DESC,
					                CASE WHEN @SortOrder = 'Updated By' AND @SortDirection = 'asc' THEN M.UPDATED_BY END ASC,
					                CASE WHEN @SortOrder = 'Updated By' AND @SortDirection = 'desc' THEN M.UPDATED_BY END DESC,
					                CASE WHEN @SortOrder = 'Updated On' AND @SortDirection = 'asc' THEN M.UPDATED_ON END ASC,
					                CASE WHEN @SortOrder = 'Updated On' AND @SortDirection = 'desc' THEN M.UPDATED_ON END DESC
			                )
				            , M.MAKER_ID, PP.PERMISSION_NAME, PP.SYSTEM_NAME, M.STATUS, PP.ACTION_URL, M.CREATED_ON, M.CREATED_BY, M.UPDATED_ON, M.UPDATED_BY
                FROM MAKER_LIST M
		             INNER JOIN SEC_PERMISSION P ON M.PERMISSION_ID = P.PERMISSION_ID
                  INNER JOIN SEC_PERMISSION PP ON P.PARENT_PERMISSION_ID = PP.PERMISSION_ID
                WHERE   M.IS_DELETED = 0
                AND	(MAKER_ID = @MakerId OR @MakerId = 0)
                AND	M.CREATED_BY = @LoginId
                AND	((M.PERMISSION_ID = @SelectedPermissionId) OR @SelectedPermissionId = -1)
	            AND	M.STATUS in ('SaveAsDraft', 'CorrectionRequired')
            )
            SELECT MAKER_ID MakerId, Permission_Name PermissionName, Status, REPLACE(REPLACE(ACTION_URL,'{0}', Maker_ID),'{1}', SYSTEM_NAME) ActionUrl, CREATED_ON CreatedOn, CREATED_BY CreatedBy, UPDATED_ON UpdatedOn, UPDATED_BY UpdatedBy
            FROM SQLPaging
            WHERE ResultNum > ((@PageNumber - 1) * @PageSize)
            order by ResultNum
            ]]>
        <Param Name="MakerId" Type="System.Int32"  Size="0"/>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="SelectedPermissionId" Type="System.Int32"  Size="0"/>
        <Param Name="PageSize" Type="System.Int32"  Size="0"/>
        <Param Name="PageNumber" Type="System.Int32"  Size="0"/>
        <Param Name="SortOrder" Type="System.String"  Size="200"/>
        <Param Name="SortDirection" Type="System.String"  Size="200"/>
      </Query>
      <Query ID="GetRoleAvailablePermissions" DataSource="">
        <![CDATA[
              SELECT  P.PERMISSION_ID PermissionId, P.PARENT_PERMISSION_ID ParentPermissionId, P.SYSTEM_NAME PermissionName
              FROM    SEC_PERMISSION P
              WHERE	  P.PARENT_PERMISSION_ID is null
              UNION
              SELECT	PERMISSION_ID, PARENT_PERMISSION_ID, USER_FRIENDLY_NAME
              FROM
              (
              SELECT	PERMISSION_ID, PARENT_PERMISSION_ID, USER_FRIENDLY_NAME
              FROM	VW_PERMISSION_HIERARCHY
              EXCEPT
              SELECT	RP.PERMISSION_ID PermissionId, P.PARENT_PERMISSION_ID, dbo.FN_GET_FRIENDLY_PERMISSION_NAME(P.SYSTEM_NAME) USER_FRIENDLY_NAME
              FROM	SEC_ROLE_PERMISSION RP
		              INNER JOIN SEC_PERMISSION P ON RP.PERMISSION_ID = P.PERMISSION_ID
              WHERE   ROLE_ID = @RoleId
              ) T
            ]]>
        <Param Name="RoleId" Type="System.Int32"  Size="0"/>
      </Query>
      <Query ID="GetRoleAssignedPermissions" DataSource="">
        <![CDATA[
            SELECT  P.PERMISSION_ID PermissionId, P.PARENT_PERMISSION_ID ParentPermissionId, P.SYSTEM_NAME PermissionName
            FROM    SEC_PERMISSION P
            WHERE	  P.PARENT_PERMISSION_ID is null
            UNION         
            SELECT	RP.PERMISSION_ID PermissionId, P.PARENT_PERMISSION_ID ParentPermissionId, dbo.FN_GET_FRIENDLY_PERMISSION_NAME(P.SYSTEM_NAME)  PermissionName
            FROM	  SEC_ROLE_PERMISSION RP
		                INNER JOIN SEC_PERMISSION P ON RP.PERMISSION_ID = P.PERMISSION_ID
            WHERE   ROLE_ID = @RoleId
            ]]>
        <Param Name="RoleId" Type="System.String"  Size="200"/>
      </Query>
      <Query ID="DeleteRole">
        <![CDATA[
              UPDATE SEC_ROLE
              SET IS_DELETED = 1
              WHERE ROLE_ID = @RoleId
              AND   IS_DELETED = 0;
              SELECT @@ROWCOUNT;
            ]]>
        <Param Name="RoleId" Type="System.Int32"  Size="0"/>
      </Query>
      <Query ID="InsertOperation">
        <![CDATA[
                INSERT INTO OF_OPERATIONS(PARENT_OPERATION_ID,PERMISSION_ID,PERMISSION_CLASS, INPUT_PARAMS,STATUS, ERROR_CODE,CREATED_BY,UPDATED_BY)
                VALUES (@ParentOperationId, (Select PERMISSION_ID FROM SEC_PERMISSION WHERE SYSTEM_NAME = @PermissionName), @PermissionClass, @InputParams, @Status, @ErrorCode, @UpdatedBy, @UpdatedBy);
                SELECT SCOPE_IDENTITY(); 
              ]]>    
        <Param Name="ParentOperationId" Type="System.Int32"  Size="0"/>
        <Param Name="PermissionName" Type="System.String"  Size="200"/>
        <Param Name="PermissionClass" Type="System.String"  Size="1024"/>
        <Param Name="Status" Type="System.String"  Size="20"/>
        <Param Name="ErrorCode" Type="System.Int32"  Size="0"/>
        <Param Name="InputParams" Type="System.String"  Size="-1"/>
        <Param Name="UpdatedBy" Type="System.String"  Size="200"/>
      </Query>
      <Query ID="UpdateOperation">
        <![CDATA[
                  UPDATE OF_OPERATIONS
                  SET   STATUS = @Status,
                        INPUT_PARAMS = @InputParams,
                        ERROR_CODE = @ErrorCode,
                        UPDATED_ON = Getdate()
                  WHERE OPERATION_ID = @OperationId;
                  SELECT @@ROWCOUNT;
                ]]>
        <Param Name="OperationId" Type="System.Int32"  Size="0"/>
        <Param Name="InputParams" Type="System.String"  Size="-1"/>
        <Param Name="Status" Type="System.String"  Size="20"/>
        <Param Name="ErrorCode" Type="System.Int32"  Size="0"/>
      </Query>
        <Query ID="InsertNotification">
        <![CDATA[
          INSERT INTO MSG_NOTIFICATIONS(OPERATION_ID,NOTIFICATION_TYPE,[FROM],[TO],CC,SUBJECT,BODY,STATUS,CREATED_BY,UPDATED_BY)
          VALUES (@OperationId, @NotificationType, @From, @To, @CC, @Subject, @Body, @Status,@CreatedBy, @CreatedBy);
          SELECT SCOPE_IDENTITY(); 
        ]]>    
        <Param Name="OperationId" Type="System.Int32"  Size="0"/>
        <Param Name="NotificationType" Type="System.String"  Size="10"/>
        <Param Name="From" Type="System.String"  Size="400"/>
        <Param Name="To" Type="System.String"  Size="400"/>
        <Param Name="CC" Type="System.String"  Size="400"/>
        <Param Name="Subject" Type="System.String"  Size="-1"/>
        <Param Name="Body" Type="System.String"  Size="400"/>
        <Param Name="Status" Type="System.String"  Size="20"/>
        <Param Name="CreatedBy" Type="System.String"  Size="400"/>
      </Query>
      <Query ID="InsertMaker">
        <![CDATA[
          INSERT INTO MAKER_LIST(PERMISSION_ID,DATA, OBJECT_ID, STATUS, IS_DELETED, CREATED_BY,UPDATED_BY)
          VALUES((Select PERMISSION_ID FROM SEC_PERMISSION WHERE SYSTEM_NAME = @PermissionId), @Data, @ObjectId, @Status, 0, @CreatedBy,@CreatedBy);
          SELECT SCOPE_IDENTITY(); 
        ]]>
        <Param Name="PermissionId" Type="System.String"  Size="200"/>
        <Param Name="Data" Type="System.String"  Size="-1"/>
        <Param Name="ObjectId" Type="System.Int32"  Size="0"/>
        <Param Name="Status" Type="System.String"  Size="20"/>
        <Param Name="CreatedBy" Type="System.String"  Size="200"/>
      </Query>
      <Query ID="UpdateMaker">
        <![CDATA[
          UPDATE MAKER_LIST
          SET		DATA = @Data,
		            Status = @Status,
                PERMISSION_ID = (Select PERMISSION_ID FROM SEC_PERMISSION WHERE SYSTEM_NAME = @PermissionId),
		            UPDATED_BY = @UpdatedBy,
                UPDATED_ON = Getdate()
          WHERE MAKER_ID = @MakerId
          AND   IS_DELETED = 0;
          SELECT @@ROWCOUNT;
        ]]>
        <Param Name="PermissionId" Type="System.String"  Size="200"/>
        <Param Name="Data" Type="System.String"  Size="-1"/>
        <Param Name="Status" Type="System.String"  Size="20"/>
        <Param Name="UpdatedBy" Type="System.String"  Size="200"/>
        <Param Name="MakerId" Type="System.Int32"  Size="0"/>
      </Query>
      <Query ID="DeleteMaker">
        <![CDATA[
            UPDATE MAKER_LIST
            SET		IS_DELETED = 1,
		              UPDATED_BY = @UpdatedBy,
                  UPDATED_ON = Getdate()
            WHERE MAKER_ID = @MakerId
            AND   IS_DELETED = 0;
            SELECT @@ROWCOUNT;
          ]]>
        <Param Name="MakerId" Type="System.Int32"  Size="0"/>
        <Param Name="UpdatedBy" Type="System.String"  Size="200"/>
      </Query>
      <Query ID="GetMaker">
        <![CDATA[
          select  MAKER_ID MakerId, PERMISSION_ID PermissionId, DATA Data, OBJECT_ID ObjectId, STATUS Status
          from	MAKER_LIST
          WHERE MAKER_ID = @MakerId
          AND   IS_DELETED = 0;
        ]]>
        <Param Name="MakerId" Type="System.Int32"  Size="0"/>
      </Query>
      <Query ID="CheckPendingMakerActivity">
        <![CDATA[
            select  COUNT(*) Total
            from	MAKER_LIST
            WHERE OBJECT_ID = @ObjectId
            AND   PERMISSION_ID = (SELECT PERMISSION_ID FROM SEC_PERMISSION WHERE SYSTEM_NAME = @PermissionId)
            AND   STATUS IN ('SaveAsDraft', 'CorrectionRequired','PendingApproval')
            AND   IS_DELETED = 0;
          ]]>
        <Param Name="ObjectId" Type="System.Int32"  Size="0"/>
        <Param Name="PermissionId" Type="System.String"  Size="200"/>
      </Query>
      <Query ID="SearchChecker" DataSource="">
        <![CDATA[
              WITH SQLPaging
                  AS
                  (
                  SELECT TOP(@PageSize * @PageNumber) ResultNum = ROW_NUMBER() OVER (ORDER BY 
					                  CASE WHEN @SortOrder = 'Maker Id' AND @SortDirection = 'asc' THEN MAKER_ID END ASC,
					                  CASE WHEN @SortOrder = 'Maker Id' AND @SortDirection = 'desc' THEN MAKER_ID END DESC,
					                  CASE WHEN @SortOrder = 'Permission Name' AND @SortDirection = 'asc' THEN PERMISSION_NAME END ASC,
					                  CASE WHEN @SortOrder = 'Permission Name' AND @SortDirection = 'desc' THEN PERMISSION_NAME END DESC,
					                  CASE WHEN @SortOrder = 'Status' AND @SortDirection = 'asc' THEN Status END ASC,
					                  CASE WHEN @SortOrder = 'Status' AND @SortDirection = 'desc' THEN Status END DESC,
					                  CASE WHEN @SortOrder = 'Created By' AND @SortDirection = 'asc' THEN M.CREATED_BY END ASC,
					                  CASE WHEN @SortOrder = 'Created By' AND @SortDirection = 'desc' THEN M.CREATED_BY END DESC,
					                  CASE WHEN @SortOrder = 'Created On' AND @SortDirection = 'asc' THEN M.CREATED_ON END ASC,
					                  CASE WHEN @SortOrder = 'Created On' AND @SortDirection = 'desc' THEN M.CREATED_ON END DESC,
					                  CASE WHEN @SortOrder = 'Updated By' AND @SortDirection = 'asc' THEN M.UPDATED_BY END ASC,
					                  CASE WHEN @SortOrder = 'Updated By' AND @SortDirection = 'desc' THEN M.UPDATED_BY END DESC,
					                  CASE WHEN @SortOrder = 'Updated On' AND @SortDirection = 'asc' THEN M.UPDATED_ON END ASC,
					                  CASE WHEN @SortOrder = 'Updated On' AND @SortDirection = 'desc' THEN M.UPDATED_ON END DESC
			                  )
				              , M.MAKER_ID, P.PERMISSION_NAME, P.SYSTEM_NAME, M.STATUS, P.ACTION_URL, M.CREATED_ON, M.CREATED_BY, M.UPDATED_ON, M.UPDATED_BY
                  FROM MAKER_LIST M
		               INNER JOIN SEC_PERMISSION P ON M.PERMISSION_ID = P.PERMISSION_ID AND P.IS_DELETED = 0
                  WHERE   M.IS_DELETED = 0
                  AND	(MAKER_ID = @MakerId OR @MakerId = 0)
                  AND	M.CREATED_BY != @LoginId
                  AND	((M.PERMISSION_ID = @SelectedPermissionId) OR @SelectedPermissionId = -1)
	              AND	M.STATUS in ('PendingApproval')
              )
              SELECT MAKER_ID MakerId, Permission_Name PermissionName, Status, REPLACE(REPLACE(ACTION_URL,'{0}', Maker_ID),'{1}', SYSTEM_NAME) ActionUrl, CREATED_ON CreatedOn, CREATED_BY CreatedBy, UPDATED_ON UpdatedOn, UPDATED_BY UpdatedBy
              FROM SQLPaging
              WHERE ResultNum > ((@PageNumber - 1) * @PageSize)
              order by ResultNum
              ]]>
        <Param Name="MakerId" Type="System.Int32"  Size="0"/>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="SelectedPermissionId" Type="System.Int32"  Size="0"/>
        <Param Name="PageSize" Type="System.Int32"  Size="0"/>
        <Param Name="PageNumber" Type="System.Int32"  Size="0"/>
        <Param Name="SortOrder" Type="System.String"  Size="200"/>
        <Param Name="SortDirection" Type="System.String"  Size="200"/>
      </Query>
      <Query ID="CheckerScreenUserPermission" DataSource="">
        <![CDATA[
              WITH WF ( Permission_id, PARENT_PERMISSION_ID)
              AS
              (
              SELECT	Permission_id, PARENT_PERMISSION_ID
              from	SEC_PERMISSION P
              WHERE   P.SYSTEM_NAME = @PermissionId
              UNION ALL
              SELECT	P.Permission_id, P.PARENT_PERMISSION_ID
              from	SEC_PERMISSION P
		              INNER JOIN WF ON P.PARENT_PERMISSION_ID  = WF.Permission_id
              WHERE	UPPER(P.SYSTEM_NAME) NOT LIKE '%.EMAIL%'
              )
              select	[dbo].[FN_GET_FRIENDLY_PERMISSION_NAME](V.SYSTEM_NAME) FieldKey, V.SYSTEM_NAME PermissionName
              from	WF
		              INNER JOIN SEC_VW_DISTINCT_USER_PERMISSION V ON WF.PERMISSION_ID = V.PERMISSION_ID
              WHERE   V.LOGIN_ID = @LoginId
              AND		[dbo].[FN_GET_FRIENDLY_PERMISSION_NAME](V.SYSTEM_NAME) in ('Search','Add','Edit','Delete','View','Checker')
              ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="PermissionId" Type="System.String"  Size="200"/>
      </Query>
      <Query ID="InsertRole" DataSource="">
        <![CDATA[
            Insert INTO SEC_ROLE(ROLE_NAME, IS_SYSTEM, IS_DELETED, CREATED_BY, UPDATED_BY)
            VALUES (@RoleName, 0, 0, @LoginId, @LoginId);
            SELECT SCOPE_IDENTITY(); 
        ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="RoleName" Type="System.String"  Size="200"/>
      </Query>
      <Query ID="UpdateRole" DataSource="">
        <![CDATA[
              UPDATE SEC_ROLE
              SET   ROLE_NAME = @RoleName,
                    UPDATED_BY = @LoginId,
                    UPDATED_ON = Getdate()
              WHERE ROLE_ID = @RoleId;
              SELECT @@ROWCOUNT;
          ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="RoleName" Type="System.String"  Size="200"/>
        <Param Name="RoleId" Type="System.Int32"  Size="0"/>
      </Query>    
      <Query ID="InsertRolePermission" DataSource="">
        <![CDATA[
            Insert INTO SEC_ROLE_PERMISSION(ROLE_ID,PERMISSION_ID,CREATED_BY,UPDATED_BY)
            VALUES ((SELECT ROLE_ID FROM SEC_ROLE WHERE ROLE_NAME = @RoleName), @PermissionId, @LoginId, @LoginId);
          ]]>
        <Param Name="LoginId" Type="System.String"  Size="200"/>
        <Param Name="PermissionId" Type="System.Int32"  Size="0"/>
        <Param Name="RoleName" Type="System.String"  Size="200"/>
      </Query>
      <Query ID="DeleteRolePermission" DataSource="">
        <![CDATA[
            DELETE FROM SEC_ROLE_PERMISSION
            WHERE  ROLE_ID = @RoleId;
            SELECT @@ROWCOUNT;
          ]]>
        <Param Name="RoleId" Type="System.Int32"  Size="0"/>
      </Query>
      <Query ID="GetGlobalErrorMapping" DataSource="">
        <![CDATA[
            select  ISNULL(P.SYSTEM_NAME,'') +'|'+ CAST(MP.ERROR_CODE AS VARCHAR(10)) ErrorCode, MP.DESCRIPTION Message
            from	  SYS_ERROR_MAPPING MP
		                LEFT OUTER JOIN SEC_PERMISSION P ON MP.PERMISSION_ID = P.PERMISSION_ID
        ]]>
      </Query>
  </Schema>
</root>